<?xml version="1.0"?>
<dumps>
  <platform name="win64" char_bit="8" short_bit="16" int_bit="32" long_bit="32" long_long_bit="64" pointer_bit="64"/>
  <rawtokens>
    <file index="0" name="rltos/src/rltos.h"/>
    <file index="1" name="rltos/src/port/CPPUTEST_UNIT_TESTING/rltos_port.h"/>
    <tok fileIndex="0" linenr="1" column="1" str="/**x * @defgroup Rltos_task Taskx * The group defining the RLTOS raw kernel tasks.x * @addtogroup Rltos_task_api apix * The public API (interface) to the RLTOS kernela tasks.x * @ingroup Rltos_taskx * @{x */"/>
    <tok fileIndex="0" linenr="10" column="1" str="#"/>
    <tok fileIndex="0" linenr="10" column="2" str="ifndef"/>
    <tok fileIndex="0" linenr="10" column="9" str="RLTOS_RLTOS_H_"/>
    <tok fileIndex="0" linenr="11" column="1" str="#"/>
    <tok fileIndex="0" linenr="11" column="2" str="define"/>
    <tok fileIndex="0" linenr="11" column="9" str="RLTOS_RLTOS_H_"/>
    <tok fileIndex="0" linenr="13" column="1" str="#"/>
    <tok fileIndex="0" linenr="13" column="2" str="include"/>
    <tok fileIndex="0" linenr="13" column="10" str="&quot;rltos_port.h&quot;"/>
    <tok fileIndex="0" linenr="15" column="1" str="/** @brief Utility macro for unused arguments*/"/>
    <tok fileIndex="0" linenr="16" column="1" str="#"/>
    <tok fileIndex="0" linenr="16" column="2" str="define"/>
    <tok fileIndex="0" linenr="16" column="9" str="RLTOS_UNUSED"/>
    <tok fileIndex="0" linenr="16" column="21" str="("/>
    <tok fileIndex="0" linenr="16" column="22" str="e"/>
    <tok fileIndex="0" linenr="16" column="23" str=")"/>
    <tok fileIndex="0" linenr="16" column="25" str="("/>
    <tok fileIndex="0" linenr="16" column="26" str="("/>
    <tok fileIndex="0" linenr="16" column="27" str="void"/>
    <tok fileIndex="0" linenr="16" column="31" str=")"/>
    <tok fileIndex="0" linenr="16" column="32" str="("/>
    <tok fileIndex="0" linenr="16" column="33" str="e"/>
    <tok fileIndex="0" linenr="16" column="34" str=")"/>
    <tok fileIndex="0" linenr="16" column="35" str=")"/>
    <tok fileIndex="0" linenr="18" column="1" str="/** @struct dummy_task_tx * @brief Dummy task structure guaranteed to be the same size as a task control structure.x * x * This is used to hide the implementation of a real task control structure - and allow static allocation of tasks.x */"/>
    <tok fileIndex="0" linenr="23" column="1" str="typedef"/>
    <tok fileIndex="0" linenr="23" column="9" str="struct"/>
    <tok fileIndex="0" linenr="24" column="1" str="{"/>
    <tok fileIndex="0" linenr="25" column="2" str="stack_ptr_type"/>
    <tok fileIndex="0" linenr="25" column="17" str="dummy0"/>
    <tok fileIndex="0" linenr="25" column="23" str=";"/>
    <tok fileIndex="0" linenr="26" column="2" str="void"/>
    <tok fileIndex="0" linenr="26" column="7" str="*"/>
    <tok fileIndex="0" linenr="26" column="9" str="dummy1"/>
    <tok fileIndex="0" linenr="26" column="15" str=";"/>
    <tok fileIndex="0" linenr="27" column="2" str="rltos_uint"/>
    <tok fileIndex="0" linenr="27" column="13" str="dummy2"/>
    <tok fileIndex="0" linenr="27" column="19" str="["/>
    <tok fileIndex="0" linenr="27" column="20" str="4"/>
    <tok fileIndex="0" linenr="27" column="21" str="]"/>
    <tok fileIndex="0" linenr="27" column="22" str=";"/>
    <tok fileIndex="0" linenr="28" column="2" str="void"/>
    <tok fileIndex="0" linenr="28" column="7" str="*"/>
    <tok fileIndex="0" linenr="28" column="9" str="dummy3"/>
    <tok fileIndex="0" linenr="28" column="15" str="["/>
    <tok fileIndex="0" linenr="28" column="16" str="6"/>
    <tok fileIndex="0" linenr="28" column="17" str="]"/>
    <tok fileIndex="0" linenr="28" column="18" str=";"/>
    <tok fileIndex="0" linenr="29" column="2" str="rltos_uint"/>
    <tok fileIndex="0" linenr="29" column="13" str="dummy4"/>
    <tok fileIndex="0" linenr="29" column="19" str="["/>
    <tok fileIndex="0" linenr="29" column="20" str="2"/>
    <tok fileIndex="0" linenr="29" column="21" str="]"/>
    <tok fileIndex="0" linenr="29" column="22" str=";"/>
    <tok fileIndex="0" linenr="30" column="1" str="}"/>
    <tok fileIndex="0" linenr="30" column="2" str="dummy_task_t"/>
    <tok fileIndex="0" linenr="30" column="14" str=";"/>
    <tok fileIndex="0" linenr="32" column="1" str="/** @struct dummy_task_list_tx * @brief Dummy task list structure guaranteed to be the same size as a task list structure.x * x * This is used to hide the implementation of a real task list structure - and allow static allocation of tasks.x */"/>
    <tok fileIndex="0" linenr="37" column="1" str="typedef"/>
    <tok fileIndex="0" linenr="37" column="9" str="struct"/>
    <tok fileIndex="0" linenr="37" column="16" str="DummyTaskLsit"/>
    <tok fileIndex="0" linenr="38" column="1" str="{"/>
    <tok fileIndex="0" linenr="39" column="2" str="void"/>
    <tok fileIndex="0" linenr="39" column="7" str="*"/>
    <tok fileIndex="0" linenr="39" column="9" str="dummy1"/>
    <tok fileIndex="0" linenr="39" column="15" str="["/>
    <tok fileIndex="0" linenr="39" column="16" str="2"/>
    <tok fileIndex="0" linenr="39" column="17" str="]"/>
    <tok fileIndex="0" linenr="39" column="18" str=";"/>
    <tok fileIndex="0" linenr="40" column="2" str="rltos_uint"/>
    <tok fileIndex="0" linenr="40" column="13" str="dummy0"/>
    <tok fileIndex="0" linenr="40" column="19" str=";"/>
    <tok fileIndex="0" linenr="41" column="1" str="}"/>
    <tok fileIndex="0" linenr="41" column="2" str="dummy_task_list_t"/>
    <tok fileIndex="0" linenr="41" column="19" str=";"/>
    <tok fileIndex="0" linenr="43" column="1" str="/** @brief pointer to dummy task structure*/"/>
    <tok fileIndex="0" linenr="44" column="1" str="typedef"/>
    <tok fileIndex="0" linenr="44" column="9" str="dummy_task_t"/>
    <tok fileIndex="0" linenr="44" column="22" str="*"/>
    <tok fileIndex="0" linenr="44" column="24" str="p_dummy_task_t"/>
    <tok fileIndex="0" linenr="44" column="38" str=";"/>
    <tok fileIndex="0" linenr="46" column="1" str="/** @brief  pointer to dummy task list structure*/"/>
    <tok fileIndex="0" linenr="47" column="1" str="typedef"/>
    <tok fileIndex="0" linenr="47" column="9" str="dummy_task_list_t"/>
    <tok fileIndex="0" linenr="47" column="27" str="*"/>
    <tok fileIndex="0" linenr="47" column="29" str="p_dummy_task_list_t"/>
    <tok fileIndex="0" linenr="47" column="48" str=";"/>
    <tok fileIndex="0" linenr="49" column="1" str="/** @brief pointer type for task functions*/"/>
    <tok fileIndex="0" linenr="50" column="1" str="typedef"/>
    <tok fileIndex="0" linenr="50" column="9" str="void"/>
    <tok fileIndex="0" linenr="50" column="13" str="*"/>
    <tok fileIndex="0" linenr="50" column="15" str="p_task_func_t"/>
    <tok fileIndex="0" linenr="50" column="28" str=";"/>
    <tok fileIndex="0" linenr="52" column="1" str="/** @brief Enters RLTOS kernel and starts scheduler timer. */"/>
    <tok fileIndex="0" linenr="53" column="1" str="void"/>
    <tok fileIndex="0" linenr="53" column="6" str="Rltos_kernel_enter"/>
    <tok fileIndex="0" linenr="53" column="24" str="("/>
    <tok fileIndex="0" linenr="53" column="25" str="void"/>
    <tok fileIndex="0" linenr="53" column="29" str=")"/>
    <tok fileIndex="0" linenr="53" column="30" str=";"/>
    <tok fileIndex="0" linenr="55" column="1" str="/** @brief Initialises task control structure, stack &amp; appends to task list.x * @param[inout] task_to_add - pointer to dummy task structure from which to create the task.x * @param[in] p_stack_top - pointer to the top of the stack.x * @param[in] p_task_f - function pointer to the task entry function.x * @param[in] task_priority - function pointer to the task entry function.x * @param[in] run_task - flag indicating whether to initialise the task to running or let it idle.*/"/>
    <tok fileIndex="0" linenr="61" column="1" str="void"/>
    <tok fileIndex="0" linenr="61" column="6" str="Rltos_task_create"/>
    <tok fileIndex="0" linenr="61" column="23" str="("/>
    <tok fileIndex="0" linenr="61" column="24" str="p_dummy_task_t"/>
    <tok fileIndex="0" linenr="61" column="39" str="const"/>
    <tok fileIndex="0" linenr="61" column="45" str="task_to_add"/>
    <tok fileIndex="0" linenr="61" column="56" str=","/>
    <tok fileIndex="0" linenr="61" column="58" str="stack_ptr_type"/>
    <tok fileIndex="0" linenr="61" column="73" str="const"/>
    <tok fileIndex="0" linenr="61" column="79" str="p_stack_top"/>
    <tok fileIndex="0" linenr="61" column="90" str=","/>
    <tok fileIndex="0" linenr="61" column="92" str="p_task_func_t"/>
    <tok fileIndex="0" linenr="61" column="106" str="const"/>
    <tok fileIndex="0" linenr="61" column="112" str="p_task_func"/>
    <tok fileIndex="0" linenr="61" column="123" str=","/>
    <tok fileIndex="0" linenr="61" column="125" str="rltos_uint"/>
    <tok fileIndex="0" linenr="61" column="136" str="const"/>
    <tok fileIndex="0" linenr="61" column="142" str="task_priority"/>
    <tok fileIndex="0" linenr="61" column="155" str=","/>
    <tok fileIndex="0" linenr="61" column="157" str="bool"/>
    <tok fileIndex="0" linenr="61" column="162" str="const"/>
    <tok fileIndex="0" linenr="61" column="168" str="run_task"/>
    <tok fileIndex="0" linenr="61" column="176" str=")"/>
    <tok fileIndex="0" linenr="61" column="177" str=";"/>
    <tok fileIndex="0" linenr="63" column="1" str="/** @brief Puts the current thread to sleep for a minimum of the given number of ticks*/"/>
    <tok fileIndex="0" linenr="64" column="1" str="void"/>
    <tok fileIndex="0" linenr="64" column="6" str="Rltos_task_sleep"/>
    <tok fileIndex="0" linenr="64" column="22" str="("/>
    <tok fileIndex="0" linenr="64" column="23" str="const"/>
    <tok fileIndex="0" linenr="64" column="29" str="rltos_uint"/>
    <tok fileIndex="0" linenr="64" column="40" str="tick_count"/>
    <tok fileIndex="0" linenr="64" column="50" str=")"/>
    <tok fileIndex="0" linenr="64" column="51" str=";"/>
    <tok fileIndex="0" linenr="66" column="1" str="#"/>
    <tok fileIndex="0" linenr="66" column="2" str="endif"/>
    <tok fileIndex="0" linenr="66" column="8" str="/* RLTOS_RLTOS_H_ */"/>
    <tok fileIndex="0" linenr="68" column="1" str="/*! @} */"/>
  </rawtokens>
  <suppressions>
  </suppressions>
