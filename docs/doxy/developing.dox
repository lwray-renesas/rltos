/**
\page developing Developing
This section attempts to outline everything to do with the development process of RLTOS.
Contents:
    - \subpage start_developing
    - \subpage coding_standards
    - \subpage doxygen
    - \subpage unit_testing
    - \subpage ports
    - \subpage porting_guide
*/

/**
\page start_developing Start Developing
To start developing you will need to install the following tools:
    - <a href="https://code.visualstudio.com/">Visual Studio Code</a>
    - <a href="https://cmake.org/">CMake</a>
    - <a href="https://cpputest.github.io/">CppUTest</a> - Follow instructions for building and installing (including the addition of the environment variables).

You will also need to install and enable the following Visual Studio Code extensions:
    - <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">C/C++</a>
    - <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools">CMake Tools</a>

\note Make sure CMake\bin is also in the PATH environment variable.

Now open the repo at the top level (using Visual Studio Code).
Configure and build using the Cmake tools extension from the command palette (ctrl + shift + p).
Debug the unit tests, also from the command palette.
*/

/**
\page coding_standards Coding Standards
Using CppCheck with MISRA addon to scan RLTOS - cppcheck project file provided check.cppcheck.
Modifications made to improve setup:
- misra.py for installation editted to return only 'error' violation severity (NOT default 'style')
- Disable style violations being presented
- Enable inline suppressions
- Normal analysis (not aggressive)
- To use cppcheck you must also create a folder at the same level as check.cppcheck called cppcheck_build_dir where cppcheck will store analysis files.

\section misra_suppressions MISRA Suppressions
This section lists the suppressions of MISRA violations and explains why they are present.
- Rltos_task_create: misra-c2012-11.3 - prohibition of casting between pointers to objects of different types - This is the only way to allow for static allocation of objects while still hiding implementation - sizes are gauranteed to be same as part of qualifying the ports.
- Rltos_task_destroy: misra-c2012-11.3 - prohibition of casting between pointers to objects of different types - This is the only way to allow for static allocation of objects while still hiding implementation - sizes are gauranteed to be same as part of qualifying the ports.

*/

/**
\page doxygen Doxygen
RLTOS uses doxygen to generate all documentation with graphviz for the calling graphs.
Documentation is posted to github pages - the latest version can be found <a href="https://https://wraydev.github.io/rltos/">here</a>.
    - <a href="https://www.doxygen.nl/index.html">Doxygen</a>
    - <a href="http://www.graphviz.org/">GraphViz</a>

The doxyfile can be found: docs/doxy/DoxyFile
Running this file through the doxygen tool will update the documentation.

\note Thanks to: <a href="https://jothepro.github.io/doxygen-awesome-css/">doxygen-awesome-css</a> for the brilliant formatting of this documentation!

*/

/**
\page unit_testing Unit Testing
RLTOS uses CppUTest to implement unit testing of all code (except ports) - this is to ensure code quality and provide protection against regressions.
And also becuase why not learn about a technique for improving your code!

To make the code build and run on windows (the host test platform) we need to make a port which satisfies the codes expectations from the porting file.
The port for unit testing contains an rltos_scheduler_asm_dummy.c file which implements skeleton versions of what should be implemented in the rltos_scheduler_asm.asm file.
The unit testing port should work for most compilers - though I can only garauntee it works on MSVC.
The testing folder should contain a CMakeLists.txt file for CMAKE to generate the testing project.

\section coverage Coverage
Here we use <a href="https://github.com/OpenCppCoverage/OpenCppCoverage/">OpenCppCoverage</a> to check for unit testing coverage in the windows environment.
More can be found on this in the \ref deployment "Deployment Page".

*/

/**
\page ports Ports
The following section outlines what ports are avilable.
Each port will explain limitations and considerations of its own implementaiton.

\section cpputest_unit_testing CPPUTEST_UNIT_TESTING
This port exists to satisfy the unit testing environment.

\section rl78 RL78
Port for the Renesas RL78 Microcontroller.

\subsection clang CLANG
Port using the CLANG/LLVM compiler

\subsection iar IAR
Port using the IAR compiler

\subsection ccrl CCRL
Port using the CCRL compiler

*/

/**
\page porting_guide Porting Guide
The following section serves as a guide for creating a port if RLTOS for another architecture.

*/
